package com.shamsaha.app.activity.CallHelper.videocall;

import android.app.IntentService;
import android.content.Intent;
import android.content.SharedPreferences;
import android.preference.PreferenceManager;
import android.util.Log;

import com.google.firebase.installations.FirebaseInstallations;
import com.google.firebase.messaging.FirebaseMessaging;
import com.shamsaha.app.ApiModel.ModelToken;
import com.shamsaha.app.activity.volunteer.onduty.DutyShiftActivity1;
import com.shamsaha.app.api.api;
import com.shamsaha.app.utils.ConstantsURL.baseURL;
import com.shamsaha.app.utils.SharedPreferencesUtils;
import com.twilio.chat.Channel;

import androidx.annotation.Nullable;
import androidx.localbroadcastmanager.content.LocalBroadcastManager;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class RegistrationIntentService extends IntentService {

    private static final String TAG = "RegIntentService";

    /*
     * The notify binding type to use. Use FCM since GCM has been deprecated by Google
     */
    private static final String BINDING_TYPE = "fcm";

    private SharedPreferences sharedPreferences;

    public RegistrationIntentService() {
        super(TAG);
    }

    @Override
    public void onCreate() {
        super.onCreate();
    }

    @Override
    protected void onHandleIntent(@Nullable Intent intent) {
        sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
        if (intent != null) {
            String identity = intent.getStringExtra("volID");
            String caseId = intent.getStringExtra("caseID");
            Log.i(TAG, "onHandleIntent: identity to register for token and binding is: "+identity);
            Log.i(TAG, "onHandleIntent: caseID to register for token and binding is: "+caseId);
            String author = "";
            if (SharedPreferencesUtils.getIsLoggedIn()){
                author = SharedPreferencesUtils.getVolunteerID();
            }else {
                author = caseId;
            }
            Log.i(TAG, "onHandleIntent: Author for twilio notify binding is : "+author);


            /*if (identity != null && identity.isEmpty() && caseId != null && !caseId.isEmpty()) {
                author = caseId;
            } else if (identity != null && !identity.isEmpty() && caseId != null && caseId.isEmpty()) {
                author = identity;
            }*/
            retrieveAccessTokenfromServer(author);
        }
    }

    private void retrieveAccessTokenfromServer(String author) {
        String requestUrl = "http://50.59.99.143/~sayg/twilio-chat/";

        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(baseURL.BaseURLTwilioChat)
                .addConverterFactory(GsonConverterFactory.create())
                .build();

        api api = retrofit.create(api.class);
        Call<ModelToken> call = api.token(author);
        call.enqueue(new Callback<ModelToken>() {
            String token = null;

            @Override
            public void onResponse(Call<ModelToken> call, Response<ModelToken> response) {
                if (response.isSuccessful()) {
                    assert response.body() != null;
                    token = response.body().getToken();
                    String identity = response.body().getIdentity();
                    Log.i(TAG, "onResponse: Identity :"+identity);
                    bind(identity, response.body().getToken());
                } else {
                    Log.d("rrrrrrrrrrr", "res: hjfdhbfjbkjad");
                }
            }

            @Override
            public void onFailure(Call<ModelToken> call, Throwable t) {
                Log.d("rrrrrrrrrrr", "res: " + t.getMessage());
            }
        });
    }

    private void bind(final String identity, final String token) {

        /*
         * Generate a new endpoint based on the existing identity and the instanceID. This ensures
         * that we maintain stability of the endpoint even if the instanceID changes without the
         * identity changing. Android may change the instance id in some cases resulting in a call
         * from the FirebaseInstanceIDService
         */
        final String newEndpoint = identity + "@" + FirebaseInstallations.getInstance().getId();

        /*
         * Obtain the new address based off the Firebase instance token
         */
        final String newAddress = FirebaseMessaging.getInstance().getToken().toString();

        if (newAddress == null) {
            /*
             * When the application is first installed it is possible that the token
             * generated by Firebase may not be assigned by the time register()
             * is called from the VideoInviteActivity.java causing this service to start.
             *
             * If this occurs, binding will be performed when onTokenRefresh() is called from
             * NotifyFirebaseInstanceIDService.
             */
            Log.w(TAG, "The Firebase token is not available yet.");
            return;
        }

        final Binding binding = new Binding(identity,
                newEndpoint,
                newAddress,
                BINDING_TYPE,
                VideoActivity.NOTIFY_TAGS);
        TwilioSDKStarterAPI.registerBinding(binding).enqueue(new Callback<Void>() {
            @Override
            public void onResponse(Call<Void> call, Response<Void> response) {
                if (response.isSuccessful()) {
                    sendRegistrationSuccess(identity, token);
                } else {
                    String message = "Binding registration failed: " + response.code() + " " + response.message();
                    Log.e(TAG, message);
                    sendRegistrationFailure(message);
                }
            }

            @Override
            public void onFailure(Call<Void> call, Throwable t) {
                String message = "Binding registration failed: " + t.getMessage();
                Log.e(TAG, message);
                sendRegistrationFailure(message);
            }
        });
    }

    private void sendRegistrationSuccess(String identity, String token) {
        Intent intent = new Intent(VideoActivity.ACTION_REGISTRATION);
        intent.putExtra(VideoActivity.REGISTRATION_IDENTITY, identity);
        intent.putExtra(VideoActivity.REGISTRATION_TOKEN, token);
        LocalBroadcastManager.getInstance(this).sendBroadcast(intent);
    }

    private void sendRegistrationFailure(String message) {
        Intent intent = new Intent(VideoActivity.ACTION_REGISTRATION);
        intent.putExtra(VideoActivity.REGISTRATION_ERROR, message);
        LocalBroadcastManager.getInstance(this).sendBroadcast(intent);
    }

    public void sendRegistrationSuccess(Channel channel) {
        Intent intent = new Intent(DutyShiftActivity1.ACTION_CHANNEL_CREATED);
        intent.putExtra(DutyShiftActivity1.ACTION_CHANNEL, channel);
        LocalBroadcastManager.getInstance(this).sendBroadcast(intent);
    }


}
